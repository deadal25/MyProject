
import controller.ControllerDB;
import java.awt.Color;
import java.awt.GridLayout;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import models.Produk;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author USER
 */
public class WarungBTS extends javax.swing.JFrame {

    private int totalBelanja = 0;

    /**
     * Creates new form WarungBTS
     */
    private void updateTable() {
        List<Produk> produkList = ControllerDB.getDatabase();
        DefaultTableModel model = (DefaultTableModel) tableMakanan.getModel();
        model.setRowCount(0);
        for (Produk produk : produkList) {
            Object[] row = { produk.getId(), produk.getNama(), produk.getStok(), 0, produk.getHarga() };
            model.addRow(row);
        }

    }

    public WarungBTS() {
        initComponents();
        tanggalNow();
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfNama = new javax.swing.JTextField();
        tfHarga = new javax.swing.JTextField();
        tfStok = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfTanggal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMakanan = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnBeli = new javax.swing.JButton();
        show_total = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfKembalian = new javax.swing.JTextField();
        tfBayar = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnBayar = new javax.swing.JButton();
        tfID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("WARUNG MAKAN BTS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Nama Makanan");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("Harga Makanan");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setText("Stok Makanan");

        tfNama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNamaActionPerformed(evt);
            }
        });

        tfHarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHargaActionPerformed(evt);
            }
        });

        tfStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfStokActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setText("Tanggal");

        tfTanggal.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tfTanggal.setEnabled(false);
        tfTanggal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTanggalActionPerformed(evt);
            }
        });

        tableMakanan.setBackground(new java.awt.Color(0, 204, 204));
        tableMakanan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "NAMA", "STOK", "JUMLAH", "HARGA"
            }
        ));
        tableMakanan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMakananMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMakanan);
        if (tableMakanan.getColumnModel().getColumnCount() > 0) {
            tableMakanan.getColumnModel().getColumn(0).setMaxWidth(40);
            tableMakanan.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        btnTambah.setBackground(new java.awt.Color(0, 153, 153));
        btnTambah.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnTambah.setText("TAMBAH");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(0, 153, 153));
        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnEdit.setText("EDIT");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 153, 153));
        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 0, 51));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnBeli.setBackground(new java.awt.Color(0, 153, 153));
        btnBeli.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBeli.setText("BELI");
        btnBeli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeliActionPerformed(evt);
            }
        });

        show_total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        show_total.setText("RP. 0");
        show_total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_totalActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("Kembalian");

        tfKembalian.setBackground(new java.awt.Color(255, 0, 51));
        tfKembalian.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tfKembalian.setForeground(new java.awt.Color(255, 0, 51));
        tfKembalian.setEnabled(false);
        tfKembalian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfKembalianActionPerformed(evt);
            }
        });

        tfBayar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        btnCancel.setBackground(new java.awt.Color(204, 0, 51));
        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBayar.setBackground(new java.awt.Color(51, 204, 0));
        btnBayar.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnBayar.setText("BAYAR");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });

        tfID.setEnabled(false);
        tfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfIDActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setText("ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNama, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfHarga, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfStok, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBeli)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(show_total, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfBayar)
                                    .addComponent(tfKembalian))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTambah, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfStok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBeli, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(show_total, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfKembalian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfBayar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMakananMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMakananMouseClicked

    // Mendapatkan kolom yang diklik
    int column = tableMakanan.getSelectedColumn();

    // Mendapatkan baris yang diklik
    int row = tableMakanan.getSelectedRow();

    // Mendapatkan model tabel
    DefaultTableModel model = (DefaultTableModel) tableMakanan.getModel();

    // Mengubah warna latar belakang dan warna tulisan pada kolom yang diklik
    if (column == 0) { // Kolom ID
        tableMakanan.setSelectionBackground(Color.YELLOW);
        tableMakanan.setSelectionForeground(Color.BLACK);
    } else if (column == 1) { // Kolom Nama
        tableMakanan.setSelectionBackground(Color.GREEN);
        tableMakanan.setSelectionForeground(Color.WHITE);
    } else if (column == 2) { // Kolom Stok
        tableMakanan.setSelectionBackground(Color.BLUE);
        tableMakanan.setSelectionForeground(Color.WHITE);
    } else if (column == 3) { // Kolom Harga
        tableMakanan.setSelectionBackground(Color.RED);
        tableMakanan.setSelectionForeground(Color.WHITE);
    } else {
        // Mendapatkan warna latar belakang dan warna tulisan pada kolom lain
        Color background = tableMakanan.getSelectionBackground();
        Color foreground = tableMakanan.getSelectionForeground();

        // Mengubah warna latar belakang dan warna tulisan pada kolom selain ID, Nama, Stok, dan Harga
        tableMakanan.setSelectionBackground(background);
        tableMakanan.setSelectionForeground(foreground);
    }
    }//GEN-LAST:event_tableMakananMouseClicked

    private void tfNamaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfNamaActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tfNamaActionPerformed

    private void tfHargaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfHargaActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tfHargaActionPerformed

    private void tfStokActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfStokActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tfStokActionPerformed

    private void tfTanggalActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfTanggalActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tfTanggalActionPerformed

    private List<Integer> selectedRowsList = new ArrayList<>();

    private void tanggalNow() {
        // Mendapatkan tanggal saat ini
        LocalDate currentDate = LocalDate.now();

        // Format tanggal sesuai kebutuhan
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Mengubah tanggal menjadi string dalam format yang diinginkan
        String formattedDate = currentDate.format(dateFormatter);

        // Mengatur nilai tanggal ke field
        tfTanggal.setText(formattedDate);
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        // menambahkan pilihan button pada jOptionPane
        UIManager.put("OptionPane.yesButtonText", "Iya");
        UIManager.put("OptionPane.noButtonText", "Tidak");

        // Mendapatkan baris yang dipilih
        int selectedRow = tableMakanan.getSelectedRow();

        // Mengecek apabila tidak ada baris dipilih
        if (selectedRow == -1) {
            // handle kesalahan
            JOptionPane.showMessageDialog(null, "Silahkan Pilih ID yang Akan di Hapus");
        } else {
            // Konfirmasi penghapusan
            int option = JOptionPane.showOptionDialog(null, "Apakah Anda ingin menghapus data?", "Konfirmasi",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

            if (option == JOptionPane.YES_OPTION) {
                // Mendapatkan nilai sesuai id yang di pilih
                int id = (int) tableMakanan.getValueAt(selectedRow, 0);

                // Memanggil matode deleteData dengan indeks yang dipilih
                ControllerDB.deletDB(id);

                // update dan handle Berhasil
                updateTable();
                JOptionPane.showMessageDialog(null, "Data Berhasil di Hapus");
            } else if (option == JOptionPane.NO_OPTION) {
                // Kode yang akan dijalankan jika memilih "tidak"
                JOptionPane.showMessageDialog(null, "Data Gagal di Hapus");
            }
        }

    }// GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        UIManager.put("OptionPane.yesButtonText", "Iya");
        UIManager.put("OptionPane.noButtonText", "Tidak");

        // Mendapatkan baris dan kolom yang dipilih
        int selectedRow = tableMakanan.getSelectedRow();
        int selectedColumn = tableMakanan.getSelectedColumn();

        // Memastikan baris dan kolom yang dipilih valid
        switch (selectedColumn) {
            case 0 -> {
                // Mendapatkan nilai saat ini dari tabel
                String idStr = tableMakanan.getValueAt(selectedRow, 0).toString();
                int id = Integer.parseInt(idStr);

                // Membuat panel untuk input nama, harga, dan stok baru
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(7, 2));

                JTextField textFieldNama = new JTextField();
                JTextField textFieldStok = new JTextField();
                JTextField textFieldHarga = new JTextField();

                panel.add(new JLabel("Silahkan Isi Semua Data!!!"));
                panel.add(new JLabel("Nama Baru:"));
                panel.add(textFieldNama);
                panel.add(new JLabel("Stok Baru:"));
                panel.add(textFieldStok);
                panel.add(new JLabel("Harga Baru:"));
                panel.add(textFieldHarga);

                // Menampilkan dialog dengan panel input
                int option = JOptionPane.showConfirmDialog(this, panel, "Edit Makanan",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

                String nama = textFieldNama.getText().trim();
                String newHarga = textFieldHarga.getText().trim();
                String newStok = textFieldStok.getText().trim();

                // Memperbarui nilai di tabel jika tidak ada input yang kosong
                if (!nama.isEmpty() && !newHarga.isEmpty() && !newStok.isEmpty()) {
                    int stok = Integer.parseInt(newStok);
                    long harga = Long.parseLong(newHarga);

                    // Jika tombol OK ditekan
                    if (option == JOptionPane.OK_OPTION) {

                        tableMakanan.setValueAt(nama, selectedRow, 1);
                        tableMakanan.setValueAt(stok, selectedRow, 2);
                        tableMakanan.setValueAt(harga, selectedRow, 4);

                        // Merubah data di database
                        ControllerDB.updateNamaDB(id, nama);
                        ControllerDB.updateStokDB(id, stok);
                        ControllerDB.updateHargaDB(id, harga);

                        JOptionPane.showMessageDialog(this, "Data Makanan berhasil diperbarui");
                    } else if (option == JOptionPane.CANCEL_OPTION) {
                        JOptionPane.showMessageDialog(this, "Data Makanan gagal diperbarui");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Data Gagal Diperbarui");
                }
            }
            case 1 -> {
                // Mendapatkan nilai saat ini dari tabel
                Object selectedValue = tableMakanan.getValueAt(selectedRow, selectedColumn);
                String idStr = tableMakanan.getValueAt(selectedRow, 0).toString();
                int id = Integer.parseInt(idStr);

                // Memunculkan panel input nama baru
                String nama = JOptionPane.showInputDialog(this, "Masukkan Nama Baru:", selectedValue);

                // Memperbarui nilai di tabel jika nama baru tidak kosong
                if (nama != null && !nama.isEmpty()) {
                    tableMakanan.setValueAt(nama, selectedRow, selectedColumn);

                    // Merubah nilai nama di database
                    ControllerDB.updateNamaDB(id, nama);
                    JOptionPane.showMessageDialog(this, "Nama berhasil diperbarui");
                } else {
                    JOptionPane.showMessageDialog(this, "Nama tidak boleh kosong");
                }
            }

            case 2 -> {
                // Mendapatkan nilai saat ini dari tabel
                Object selectedValue = tableMakanan.getValueAt(selectedRow, selectedColumn);
                String idStr = tableMakanan.getValueAt(selectedRow, 0).toString();
                int id = Integer.parseInt(idStr);

                // Memunculkan panel input stok baru
                String newStok = JOptionPane.showInputDialog(this, "Masukkan Stok Baru:", selectedValue);

                // Memperbarui nilai di tabel jika harga baru tidak kosong
                if (newStok != null && !newStok.isEmpty()) {
                    try {
                        int stok = Integer.parseInt(newStok);

                        if (stok > 0) {
                            tableMakanan.setValueAt(stok, selectedRow, selectedColumn);

                            // Merubah nilai harga di database
                            ControllerDB.updateStokDB(id, stok);
                            JOptionPane.showMessageDialog(this, "Stok berhasil diperbarui");
                        } else {
                            JOptionPane.showMessageDialog(this, "Stok tidak boleh negatif");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Stok Harus Angka");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Stok tidak boleh kosong");
                }
            }
            case 4 -> {
                // Mendapatkan nilai saat ini dari tabel
                Object selectedValue = tableMakanan.getValueAt(selectedRow, selectedColumn);
                String idStr = tableMakanan.getValueAt(selectedRow, 0).toString();
                int id = Integer.parseInt(idStr);

                // Memunculkan panel input harga baru
                String newHarga = JOptionPane.showInputDialog(this, "Masukkan Harga Baru:", selectedValue);

                // Memperbarui nilai di tabel jika harga baru tidak kosong
                if (newHarga != null && !newHarga.isEmpty()) {
                    try {
                        long harga = Long.parseLong(newHarga);

                        if (harga > 0) {
                            tableMakanan.setValueAt(harga, selectedRow, selectedColumn);

                            // Merubah nilai harga di database
                            ControllerDB.updateHargaDB(id, harga);
                            JOptionPane.showMessageDialog(this, "Harga berhasil diperbarui");
                        } else {
                            JOptionPane.showMessageDialog(this, "Harga tidak boleh negatif");
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Harga Harus Angka");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Harga tidak boleh kosong");
                }
            }
            default -> JOptionPane.showMessageDialog(this, "Pilih baris dan kolom yang valid");
        }

    }// GEN-LAST:event_btnEditActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }// GEN-LAST:event_btnExitActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableMakanan.getSelectedRow();

        if (selectedRow != -1) {
            int StokMakanan = Integer.parseInt(tableMakanan.getValueAt(selectedRow, 2).toString());
            int JumlahMakanan = Integer.parseInt(tableMakanan.getValueAt(selectedRow, 3).toString());
            if (JumlahMakanan > 0) {
                double HargaMakanan = Double.parseDouble(tableMakanan.getValueAt(selectedRow, 4).toString());
                totalBelanja -= HargaMakanan;
                show_total.setText(String.valueOf(totalBelanja));

                StokMakanan++;
                JumlahMakanan--;
                tableMakanan.setValueAt(StokMakanan, selectedRow, 2);
                tableMakanan.setValueAt(JumlahMakanan, selectedRow, 3);

            }
        }
    }// GEN-LAST:event_btnCancelActionPerformed

    private void tfIDActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfIDActionPerformed
        // TODO add your handling code here:
        String target = tfID.getText();
        String namaBaru = tfNama.getText();
        String stokBarustr = tfStok.getText();
        String hargaBarustr = tfHarga.getText();

        long hargaBaru = Long.parseLong(hargaBarustr);
        int stokBaru = Integer.parseInt(stokBarustr);
        int targetint = Integer.parseInt(target);

        ControllerDB.updateNamaDB(targetint, namaBaru);
        ControllerDB.updateStokDB(targetint, stokBaru);
        ControllerDB.updateHargaDB(targetint, hargaBaru);

        tfID.setText("");
        tfNama.setText("");
        tfStok.setText("");
        tfHarga.setText("");

        updateTable();

    }// GEN-LAST:event_tfIDActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        String namaBaru = tfNama.getText();
        String stokBarustr = tfStok.getText();
        String hargaBarustr = tfHarga.getText();

        long hargaBaru = Long.parseLong(hargaBarustr);
        int stokBaru = Integer.parseInt(stokBarustr);
        ControllerDB.insertDB(namaBaru, hargaBaru, stokBaru);

        tfNama.setText("");
        tfStok.setText("");
        tfHarga.setText("");
        updateTable();
    }// GEN-LAST:event_btnTambahActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnBayarActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableMakanan.getModel();
        String uangStr = tfBayar.getText();
        String totalStr = show_total.getText();
        int uang = Integer.parseInt(uangStr);
        int total = Integer.parseInt(totalStr);

        for (int selectedRow : selectedRowsList) {
            int id = (int) model.getValueAt(selectedRow, 0);
            int StokMakanan = (int) model.getValueAt(selectedRow, 2);

            if (StokMakanan >= 0) {
                if (uang >= total) {
                    ControllerDB.updateStokDB(id, StokMakanan);

                    int kembalian = uang - total;
                    String kembalianStr = String.valueOf(kembalian);
                    tfKembalian.setText(kembalianStr);
                    tfKembalian.setForeground(Color.GREEN);
                    // LabelKembalian.setText("KEMBALIAN ANDA Rp." + tfKembalian.getText());

                    // Reset jumlah Makanan ke 0
                    model.setValueAt(0, selectedRow, 3);
                } else {
                    // LabelKembalian.setForeground(Color.RED);
                    // LabelKembalian.setText("UANG ANDA TIDAK CUKUP!");
                    updateTable();
                }
            }
        }

        totalBelanja = 0;

    }// GEN-LAST:event_btnBayarActionPerformed

    private void btnBeliActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnBeliActionPerformed
        int selectedRow = tableMakanan.getSelectedRow();

        if (selectedRow != -1) {
            if (!selectedRowsList.contains(selectedRow)) {
                selectedRowsList.add(selectedRow);
            }

            int StokMakanan = Integer.parseInt(tableMakanan.getValueAt(selectedRow, 2).toString());

            if (StokMakanan > 0) {
                double HargaMakanan = Double.parseDouble(tableMakanan.getValueAt(selectedRow, 4).toString());
                totalBelanja += HargaMakanan;
                show_total.setText(String.valueOf(totalBelanja));

                int JumlahMakanan = Integer.parseInt(tableMakanan.getValueAt(selectedRow, 3).toString());
                StokMakanan--;
                JumlahMakanan++;
                tableMakanan.setValueAt(StokMakanan, selectedRow, 2);
                tableMakanan.setValueAt(JumlahMakanan, selectedRow, 3);
            }
        }
    }// GEN-LAST:event_btnBeliActionPerformed

    private void show_totalActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_show_totalActionPerformed
        // TODO add your handling code here:
        updateTable();
    }// GEN-LAST:event_show_totalActionPerformed

    private void tfKembalianActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tfKembalianActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tfKembalianActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WarungBTS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WarungBTS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WarungBTS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WarungBTS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WarungBTS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnBeli;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnTambah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField show_total;
    private javax.swing.JTable tableMakanan;
    private javax.swing.JTextField tfBayar;
    private javax.swing.JTextField tfHarga;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfKembalian;
    private javax.swing.JTextField tfNama;
    private javax.swing.JTextField tfStok;
    private javax.swing.JTextField tfTanggal;
    // End of variables declaration//GEN-END:variables
}
